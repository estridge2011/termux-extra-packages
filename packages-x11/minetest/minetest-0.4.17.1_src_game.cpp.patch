diff -uNr minetest-0.4.17.1/src/game.cpp minetest-0.4.17.1.mod/src/game.cpp
--- minetest-0.4.17.1/src/game.cpp	2018-06-10 18:18:11.000000000 +0300
+++ minetest-0.4.17.1.mod/src/game.cpp	2018-09-04 15:42:26.133487672 +0300
@@ -950,11 +950,7 @@
 
 }
 
-#ifdef __ANDROID__
-#define SIZE_TAG "size[11,5.5]"
-#else
 #define SIZE_TAG "size[11,5.5,true]" // Fixed size on desktop
-#endif
 
 /******************************************************************************/
 static void updateChat(Client &client, f32 dtime, bool show_debug,
@@ -1358,10 +1354,6 @@
 		return input->wasKeyDown(keycache.key[k]) || input->joystick.wasKeyDown(k);
 	}
 
-#ifdef __ANDROID__
-	void handleAndroidChatInput();
-#endif
-
 private:
 	void showPauseMenu();
 
@@ -1462,10 +1454,6 @@
 	bool m_first_loop_after_window_activation;
 	bool m_camera_offset_changed;
 
-#ifdef __ANDROID__
-	bool m_cache_hold_aux1;
-	bool m_android_chat_open;
-#endif
 };
 
 Game::Game() :
@@ -1524,9 +1512,6 @@
 
 	readSettings();
 
-#ifdef __ANDROID__
-	m_cache_hold_aux1 = false;	// This is initialised properly later
-#endif
 
 }
 
@@ -1654,11 +1639,6 @@
 
 	set_light_table(g_settings->getFloat("display_gamma"));
 
-#ifdef __ANDROID__
-	m_cache_hold_aux1 = g_settings->getBool("fast_move")
-			&& client->checkPrivilege("fast");
-#endif
-
 	irr::core::dimension2d<u32> previous_screen_size(g_settings->getU16("screenW"),
 		g_settings->getU16("screenH"));
 
@@ -2479,13 +2459,6 @@
 	// Input handler step() (used by the random input generator)
 	input->step(dtime);
 
-#ifdef __ANDROID__
-	if (current_formspec != NULL)
-		current_formspec->getAndroidUIInput();
-	else
-		handleAndroidChatInput();
-#endif
-
 	// Increase timer for double tap of "keymap_jump"
 	if (m_cache_doubletap_jump && runData.jump_timer <= 0.2f)
 		runData.jump_timer += dtime;
@@ -2690,10 +2663,6 @@
 {
 	assert(scale > 0.0f && scale <= 1.0f);
 
-#ifdef __ANDROID__
-	porting::showInputDialog(gettext("ok"), "", "", 2);
-	m_android_chat_open = true;
-#else
 	if (gui_chat_console->isOpenInhibited())
 		return;
 	gui_chat_console->openConsole(scale);
@@ -2701,18 +2670,7 @@
 		gui_chat_console->setCloseOnEnter(true);
 		gui_chat_console->replaceAndAddToHistory(line);
 	}
-#endif
-}
-
-#ifdef __ANDROID__
-void Game::handleAndroidChatInput()
-{
-	if (m_android_chat_open && porting::getInputDialogState() == 0) {
-		std::string text = porting::getInputDialogValue();
-		client->typeChatMessage(utf8_to_wide(text));
-	}
 }
-#endif
 
 
 void Game::toggleFreeMove()
@@ -2752,9 +2710,6 @@
 	if (fast_move && !has_fast_privs)
 		m_statustext += L" (note: no 'fast' privilege)";
 
-#ifdef __ANDROID__
-	m_cache_hold_aux1 = fast_move && has_fast_privs;
-#endif
 }
 
 
@@ -2991,13 +2946,11 @@
 	if ((device->isWindowActive() && device->isWindowFocused()
 			&& !isMenuActive()) || random_input) {
 
-#ifndef __ANDROID__
 		if (!random_input) {
 			// Mac OSX gets upset if this is set every frame
 			if (device->getCursorControl()->isVisible())
 				device->getCursorControl()->setVisible(false);
 		}
-#endif
 
 		if (m_first_loop_after_window_activation)
 			m_first_loop_after_window_activation = false;
@@ -3008,11 +2961,9 @@
 				(driver->getScreenSize().Height / 2));
 	} else {
 
-#ifndef ANDROID
 		// Mac OSX gets upset if this is set every frame
 		if (!device->getCursorControl()->isVisible())
 			device->getCursorControl()->setVisible(true);
-#endif
 
 		m_first_loop_after_window_activation = true;
 
@@ -3089,18 +3040,6 @@
 			( (u32)(isRightPressed()                                  & 0x1) << 8
 		);
 
-#ifdef ANDROID
-	/* For Android, simulate holding down AUX1 (fast move) if the user has
-	 * the fast_move setting toggled on. If there is an aux1 key defined for
-	 * Android then its meaning is inverted (i.e. holding aux1 means walk and
-	 * not fast)
-	 */
-	if (m_cache_hold_aux1) {
-		control.aux1 = control.aux1 ^ true;
-		keypress_bits ^= ((u32)(1U << 5));
-	}
-#endif
-
 	client->setPlayerControl(control);
 	LocalPlayer *player = client->getEnv().getLocalPlayer();
 	player->keyPressed = keypress_bits;
@@ -4548,21 +4487,6 @@
 #define GET_KEY_NAME(KEY) gettext(getKeySetting(#KEY).name())
 void Game::showPauseMenu()
 {
-#ifdef __ANDROID__
-	static const std::string control_text = strgettext("Default Controls:\n"
-		"No menu visible:\n"
-		"- single tap: button activate\n"
-		"- double tap: place/use\n"
-		"- slide finger: look around\n"
-		"Menu/Inventory visible:\n"
-		"- double tap (outside):\n"
-		" -->close\n"
-		"- touch stack, touch slot:\n"
-		" --> move stack\n"
-		"- touch&drag, tap 2nd finger\n"
-		" --> place single item to slot\n"
-		);
-#else
 	static const std::string control_text_template = strgettext("Controls:\n"
 		"- %s: move forwards\n"
 		"- %s: move backwards\n"
@@ -4595,7 +4519,6 @@
 
 	std::string control_text = std::string(control_text_buf);
 	str_formspec_escape(control_text);
-#endif
 
 	float ypos = simple_singleplayer_mode ? 0.7f : 0.1f;
 	std::ostringstream os;
@@ -4611,12 +4534,10 @@
 		os << "field[4.95,0;5,1.5;;" << strgettext("Game paused") << ";]";
 	}
 
-#ifndef __ANDROID__
 	os		<< "button_exit[4," << (ypos++) << ";3,0.5;btn_sound;"
 		<< strgettext("Sound Volume") << "]";
 	os		<< "button_exit[4," << (ypos++) << ";3,0.5;btn_key_config;"
 		<< strgettext("Change Keys")  << "]";
-#endif
 	os		<< "button_exit[4," << (ypos++) << ";3,0.5;btn_exit_menu;"
 		<< strgettext("Exit to Menu") << "]";
 	os		<< "button_exit[4," << (ypos++) << ";3,0.5;btn_exit_os;"
